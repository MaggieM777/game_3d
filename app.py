import streamlit as st
import streamlit.components.v1 as components

st.set_page_config(layout="wide")
st.title("üå≤ –£—Ä–æ–∫ 3: –ì–µ—Ä–æ–π –≤ 3D –≥–æ—Ä–∞")

threejs_html = """
<div style="width:100%; height:600px;">
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/examples/js/controls/OrbitControls.js"></script>
  <canvas id="threeCanvas" width="1000" height="600"></canvas>
  <textarea id="commandInput" rows="4" style="width: 100%; margin-top: 10px;">–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –Ω–∞–ø—Ä–µ–¥).</textarea>
  <button onclick="runCommands()" style="margin:10px 0;padding:8px 16px;">–ò–∑–ø—ä–ª–Ω–∏</button>

  <script>
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ü–µ–Ω–∞—Ç–∞
    const canvas = document.getElementById("threeCanvas");
    const renderer = new THREE.WebGLRenderer({ 
      canvas: canvas, 
      antialias: true,
      alpha: true
    });
    renderer.setSize(canvas.width, canvas.height);
    renderer.shadowMap.enabled = true;
    
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xa8dadc);

    const camera = new THREE.PerspectiveCamera(60, canvas.width / canvas.height, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);
    
    // –û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(10, 20, 10);
    directionalLight.castShadow = true;
    scene.add(directionalLight);
    scene.add(new THREE.AmbientLight(0x404040));

    // –¢–µ—Ä–µ–Ω
    const groundGeometry = new THREE.PlaneGeometry(50, 50);
    const groundMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x228b22,
      side: THREE.DoubleSide
    });
    const ground = new THREE.Mesh(groundGeometry, groundMaterial);
    ground.rotation.x = -Math.PI / 2;
    ground.receiveShadow = true;
    scene.add(ground);

    // –§–ª–∞–≥
    const flagGeometry = new THREE.BoxGeometry(0.5, 1, 0.5);
    const flagMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
    const flag = new THREE.Mesh(flagGeometry, flagMaterial);
    flag.position.set(5, 0.5, -5);
    flag.castShadow = true;
    scene.add(flag);

    // –ì–µ—Ä–æ–π
    let hero;
    const loader = new THREE.GLTFLoader();
    
    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏
    loader.load(
      'https://raw.githubusercontent.com/MaggieM777/game_3d/main/mini_mario_rigged_mixamo.glb',
      function (gltf) {
        hero = gltf.scene;
        hero.position.set(0, 0, 0);
        hero.scale.set(0.5, 0.5, 0.5);
        
        // –í–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å—è–Ω–∫–∞ –∑–∞ –≥–µ—Ä–æ—è
        hero.traverse(function(node) {
          if (node.isMesh) {
            node.castShadow = true;
          }
        });
        
        scene.add(hero);
        console.log("–ú–æ–¥–µ–ª—ä—Ç –µ –∑–∞—Ä–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
      },
      undefined,
      function (error) {
        console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ:", error);
        // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª
        const geometry = new THREE.BoxGeometry(1, 2, 1);
        const material = new THREE.MeshStandardMaterial({ color: 0x0000ff });
        hero = new THREE.Mesh(geometry, material);
        hero.position.set(0, 1, 0);
        hero.castShadow = true;
        scene.add(hero);
      }
    );

    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–µ–Ω —Ü–∏–∫—ä–ª
    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }
    animate();

    // –ö–æ–Ω—Ç—Ä–æ–ª–∏ –∑–∞ –∫–∞–º–µ—Ä–∞—Ç–∞
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
    function runCommands() {
      const cmds = document.getElementById("commandInput").value
        .split('.')
        .map(c => c.trim())
        .filter(c => c.length > 0);
      
      let index = 0;
      const step = 1.5;

      function executeNext() {
        if (index >= cmds.length) return;
        if (!hero) return;

        const cmd = cmds[index];
        
        if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –Ω–∞–ø—Ä–µ–¥\\)/.test(cmd)) {
          hero.position.z -= step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –Ω–∞–∑–∞–¥\\)/.test(cmd)) {
          hero.position.z += step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –ª—è–≤–æ\\)/.test(cmd)) {
          hero.position.x -= step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –¥—è—Å–Ω–æ\\)/.test(cmd)) {
          hero.position.x += step;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ–±–µ–¥–∞
        if (hero.position.distanceTo(flag.position) < 2) {
          alert("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –î–æ—Å—Ç–∏–≥–Ω–∞ —Ü–µ–ª—Ç–∞!");
        }

        index++;
        setTimeout(executeNext, 700);
      }

      executeNext();
    }
  </script>
</div>
"""

components.html(threejs_html, height=700)
