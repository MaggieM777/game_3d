import streamlit as st
import streamlit.components.v1 as components

st.set_page_config(layout="wide")
st.title("üå≤ –£—Ä–æ–∫ 3: –ì–µ—Ä–æ–π –≤ 3D –≥–æ—Ä–∞")

st.markdown("""
## üéÆ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

–í —Ç–æ–∑–∏ —É—Ä–æ–∫ —â–µ —É–ø—Ä–∞–≤–ª—è–≤–∞—à –∞–Ω–∏–º–∏—Ä–∞–Ω –≥–µ—Ä–æ–π –≤ 3D —Å—Ä–µ–¥–∞ —á—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–∏, –ø–æ–¥–æ–±–Ω–∏ –Ω–∞ —Ç–µ–∑–∏ –≤ Prolog:

- `–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –Ω–∞–ø—Ä–µ–¥).`
- `–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –Ω–∞–∑–∞–¥).`
- `–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –ª—è–≤–æ).`
- `–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –¥—è—Å–Ω–æ).`

üö© –¶–µ–ª—Ç–∞ –µ –¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—à —á–µ—Ä–≤–µ–Ω–æ—Ç–æ –∑–Ω–∞–º–µ.
""")

threejs_html = """
<div style="width:100%; height:600px;">
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/examples/js/loaders/GLTFLoader.js"></script>
  <canvas id="threeCanvas" width="1000" height="600"></canvas>
  <textarea id="commandInput" rows="4" style="width: 100%; margin-top: 10px;">–º–µ—Å—Ç—è(–≥–µ—Ä–æ–π, –Ω–∞–ø—Ä–µ–¥).</textarea>
  <button onclick="runCommands()" style="margin:10px 0;padding:8px 16px;">–ò–∑–ø—ä–ª–Ω–∏</button>

  <script>
    const canvas = document.getElementById("threeCanvas");
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(canvas.width, canvas.height);
    
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xa8dadc);

    const camera = new THREE.PerspectiveCamera(60, canvas.width / canvas.height, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);
    
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(10, 10, 10);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    // Terrain (–ì–æ—Ä–∞)
    const ground = new THREE.Mesh(
      new THREE.PlaneGeometry(50, 50),
      new THREE.MeshStandardMaterial({ color: 0x228b22 })
    );
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    // Flag (—Ü–µ–ª–µ–≤–∞ —Ç–æ—á–∫–∞)
    const flag = new THREE.Mesh(
      new THREE.BoxGeometry(0.5, 1, 0.5),
      new THREE.MeshStandardMaterial({ color: 0xff0000 })
    );
    flag.position.set(5, 0.5, -5);
    scene.add(flag);

    // –ì–µ—Ä–æ–π
    let hero;
    const loader = new THREE.GLTFLoader();
    
    // –ü—É–±–ª–∏—á–µ–Ω URL –∫—ä–º –º–æ–¥–µ–ª–∞ –æ—Ç GitHub
    const modelUrl = "https://raw.githubusercontent.com/MaggieM777/game_3d/main/mini_mario_rigged_mixamo.glb";
    
    loader.load(
      modelUrl,
      function (gltf) {
        hero = gltf.scene;
        hero.position.set(0, 0, 0);
        hero.scale.set(0.5, 0.5, 0.5); // –†–µ–≥—É–ª–∏—Ä–∞–Ω–µ —Ä–∞–∑–º–µ—Ä–∞
        scene.add(hero);
        animate();
      },
      undefined,
      function (error) {
        console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞:", error);
        // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–µ–Ω –∫—É–± –∞–∫–æ –º–æ–¥–µ–ª–∞ –Ω–µ —Å–µ –∑–∞—Ä–µ–¥–∏
        const geometry = new THREE.BoxGeometry(1, 2, 1);
        const material = new THREE.MeshStandardMaterial({ color: 0x0000ff });
        hero = new THREE.Mesh(geometry, material);
        hero.position.set(0, 1, 0);
        scene.add(hero);
        animate();
      }
    );

    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }

    // –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ
    function runCommands() {
      const cmds = document.getElementById("commandInput").value
        .split('.')
        .map(c => c.trim())
        .filter(c => c.length > 0);
      let index = 0;

      function executeNext() {
        if (index >= cmds.length) return;

        let cmd = cmds[index];
        const step = 1;

        if (!hero) return;

        if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –Ω–∞–ø—Ä–µ–¥\\)/.test(cmd)) {
          hero.position.z -= step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –Ω–∞–∑–∞–¥\\)/.test(cmd)) {
          hero.position.z += step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –ª—è–≤–æ\\)/.test(cmd)) {
          hero.position.x -= step;
        } else if (/–º–µ—Å—Ç—è\\(–≥–µ—Ä–æ–π, –¥—è—Å–Ω–æ\\)/.test(cmd)) {
          hero.position.x += step;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≥–µ—Ä–æ—è—Ç –µ –¥–æ—Å—Ç–∏–≥–Ω–∞–ª —Ü–µ–ª—Ç–∞
        const dx = hero.position.x - flag.position.x;
        const dz = hero.position.z - flag.position.z;
        if (Math.sqrt(dx*dx + dz*dz) < 1.5) {
          alert("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –î–æ—Å—Ç–∏–≥–Ω–∞ —Ü–µ–ª—Ç–∞!");
        }

        index++;
        setTimeout(executeNext, 700);
      }

      executeNext();
    }
  </script>
</div>
"""

components.html(threejs_html, height=700)
